[project]
name = "server"
version = "0.1.0"
authors = [{ name = "chochinlu", email = "chochinlu@gmail.com" }]
description = "CityActivitas Backend"
license = { file = "LICENSE" }
readme = "docs/README.md"
requires-python = "==3.12"
dependencies = [
    "annotated-types==0.7.0",
    "anyio==4.6.2.post1",
    "certifi==2024.8.30",
    "click==8.1.7",
    "dnspython==2.7.0",
    "email_validator==2.2.0",
    "fastapi==0.115.4",
    "fastapi-cli==0.0.5",
    "greenlet==3.1.1",
    "h11==0.14.0",
    "httpcore==1.0.6",
    "httptools==0.6.4",
    "httpx==0.27.2",
    "idna==3.10",
    "Jinja2==3.1.4",
    "markdown-it-py==3.0.0",
    "MarkupSafe==3.0.2",
    "mdurl==0.1.2",
    "pydantic==2.9.2",
    "pydantic_core==2.23.4",
    "Pygments==2.18.0",
    "python-dotenv==1.0.1",
    "python-multipart==0.0.16",
    "PyYAML==6.0.2",
    "rich==13.9.3",
    "shellingham==1.5.4",
    "sniffio==1.3.1",
    "SQLAlchemy==2.0.36",
    "starlette==0.41.2",
    "typer==0.12.5",
    "typing_extensions==4.12.2",
    "uvicorn==0.32.0",
    "uvloop==0.21.0",
    "watchfiles==0.24.0",
    "websockets==13.1",
]

[dependency-groups]
dev = ["invoke>=2.2.0"]
test = [
    "coverage[toml]>=7.6.7",
    "pytest>=8.3.3",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
]
style = ["mypy>=1.13.0", "ruff>=0.7.4"]
security = ["bandit>=1.7.10", "pip-audit>=2.7.3"]
git = ["commitizen>=3.31.0", "pre-commit>=4.0.1"]
doc = ["mkdocs>=1.6.1", "mkdocs-material>=9.5.45"]


[tool.commitizen]
name = "cz_conventional_commits"
version = "0.0.1"
tag_format = "$version"
version_files = ["pyproject.toml:version"]


[tool.mypy]
files = ["server", "tests"]
ignore_missing_imports = true
follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false
disallow_untyped_decorators = false
# Ensure full coverage
disallow_untyped_calls = true
disallow_incomplete_defs = true
# Restrict dynamic typing
disallow_any_generics = true
disallow_subclassing_any = true
warn_return_any = true


[tool.ruff]
line-length = 110

[tool.ruff.lint]
extend-select = [
    "I",     # Missing required import (auto-fixable)
    "UP",    # Pyupgrade
    "PT",    # flake8-pytest-style rules
    "TID25", # flake8-tidy-imports rules
]

ignore = ["E501", "D1", "D415"]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]
combine-as-imports = true
known-first-party = ["tests"]

[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.pytest.ini_options]
minversion = "8.0.0"
testpaths = "tests"
addopts = "--strict-markers"
norecursedirs = [
    ".*",
    "build",
    "dist",
    "CVS",
    "_darcs",
    "{arch}",
    "*.egg",
    "venv",
    "env",
    "virtualenv",
]


[tool.coverage]
[tool.coverage.report]
show_missing = true
exclude_lines = [
    # Have to re-enable the standard pragma
    'pragma: no cover',

    # Don't complain about missing debug-only code:
    'def __repr__',
    'if self\.debug',

    # Don't complain if tests don't hit defensive assertion code:
    'raise AssertionError',
    'raise NotImplementedError',

    # Don't complain if non-runnable code isn't run:
    'if 0:',
    'if __name__ == .__main__.:',
]
omit = ['env/*', 'venv/*', '*/virtualenv/*', '*/virtualenvs/*', '*/tests/*']
